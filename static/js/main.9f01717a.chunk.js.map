{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleConnectChange","event","setState","otherPeer","target","value","handleConnectSubmit","preventDefault","console","log","state","peer","signal","JSON","parse","handleSendChange","inputMessages","handleSendSubmit","send","Peer","initiator","window","location","hash","trickle","wrtc","thisPeer","outputMessages","_this2","on","err","data","stringify","String","fromCharCode","apply","react_default","a","createElement","className","onSubmit","type","onChange","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVA+FeA,cAzFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,oBAAsB,SAAAC,GACpBR,EAAKS,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SAjBvBZ,EAoBnBa,oBAAsB,SAAAL,GACpBA,EAAMM,iBACNC,QAAQC,IAAI,cAAehB,EAAKiB,MAAMP,WACtCV,EAAKiB,MAAMC,KAAKC,OAAOC,KAAKC,MAAMrB,EAAKiB,MAAMP,aAvB5BV,EA2BnBsB,iBAAmB,SAAAd,GACjBR,EAAKS,SAAS,CAAEc,cAAef,EAAMG,OAAOC,SA5B3BZ,EA+BnBwB,iBAAmB,SAAAhB,GACjBA,EAAMM,iBACNC,QAAQC,IAAI,kBAAmBhB,EAAKiB,MAAMM,eAC1CvB,EAAKiB,MAAMC,KAAKO,KAAKzB,EAAKiB,MAAMM,gBAhChCvB,EAAKiB,MAAQ,CACXC,KAAM,IAAIQ,IAAK,CACbC,UAAoC,OAAzBC,OAAOC,SAASC,KAC3BC,SAAS,EACTC,KAAMA,MAERC,SAAU,IACVvB,UAAW,IACXa,cAAe,IACfW,eAAgB,KAXDlC,wEAqCV,IAAAmC,EAAAhC,KAECe,EAASf,KAAKc,MAAdC,KAiBR,OAhBAA,EAAKkB,GAAG,QAAS,SAAAC,GAAG,OAAItB,QAAQC,IAAI,UAAWqB,KAG/CnB,EAAKkB,GAAG,SAAU,SAAAE,GAChB,IAAML,EAAWb,KAAKmB,UAAUD,GAChCvB,QAAQC,IAAI,cAAeiB,GAC3BE,EAAK1B,SAAS,CAAEwB,eAIlBf,EAAKkB,GAAG,OAAQ,SAAAE,GACd,IAAMJ,EAAiBM,OAAOC,aAAaC,MAAM,KAAMJ,GACvDvB,QAAQC,IAAI,mBAAoBkB,GAChCC,EAAK1B,SAAS,CAAEyB,qBAIhBS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,YAAUjC,MAAOT,KAAKc,MAAMgB,WAC5BU,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAME,SAAU5C,KAAKU,qBACnB8B,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,YACEG,KAAK,OACLpC,MAAOT,KAAKc,MAAMP,UAClBuC,SAAU9C,KAAKI,sBAEjBoC,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASpC,MAAM,aAE7B+B,EAAAC,EAAAC,cAAA,QAAME,SAAU5C,KAAKqB,kBACnBmB,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,YACEG,KAAK,OACLpC,MAAOT,KAAKc,MAAMM,cAClB0B,SAAU9C,KAAKmB,mBAEjBqB,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASpC,MAAM,UAE7B+B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACX3C,KAAKc,MAAMiB,yBAlFNgB,aCOEC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,iECXNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f01717a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Peer from \"simple-peer\";\nimport wrtc from \"wrtc\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      peer: new Peer({\n        initiator: window.location.hash === \"#1\",\n        trickle: false,\n        wrtc: wrtc\n      }),\n      thisPeer: \" \",\n      otherPeer: \" \",\n      inputMessages: \" \",\n      outputMessages: \" \"\n    };\n  }\n\n  // For the connection\n  handleConnectChange = event => {\n    this.setState({ otherPeer: event.target.value });\n  };\n\n  handleConnectSubmit = event => {\n    event.preventDefault();\n    console.log(\"OtherPeer: \", this.state.otherPeer);\n    this.state.peer.signal(JSON.parse(this.state.otherPeer));\n  };\n\n  // For sending messages\n  handleSendChange = event => {\n    this.setState({ inputMessages: event.target.value });\n  };\n\n  handleSendSubmit = event => {\n    event.preventDefault();\n    console.log(\"Input Message: \", this.state.inputMessages);\n    this.state.peer.send(this.state.inputMessages);\n  };\n\n  render() {\n    // Check for error in the generated peer\n    const { peer } = this.state;\n    peer.on(\"error\", err => console.log(\"Error: \", err));\n\n    // Get this peer\n    peer.on(\"signal\", data => {\n      const thisPeer = JSON.stringify(data);\n      console.log(\"This Peer: \", thisPeer);\n      this.setState({ thisPeer });\n    });\n\n    // Get received messages\n    peer.on(\"data\", data => {\n      const outputMessages = String.fromCharCode.apply(null, data);\n      console.log(\"Output Message: \", outputMessages);\n      this.setState({ outputMessages });\n    });\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Your ID:</p>\n          <textarea value={this.state.thisPeer} />\n          <br />\n          <form onSubmit={this.handleConnectSubmit}>\n            <p>Other ID:</p>\n            <textarea\n              type=\"text\"\n              value={this.state.otherPeer}\n              onChange={this.handleConnectChange}\n            />\n            <input type=\"submit\" value=\"Connect\" />\n          </form>\n          <form onSubmit={this.handleSendSubmit}>\n            <p>Send Message:</p>\n            <textarea\n              type=\"text\"\n              value={this.state.inputMessages}\n              onChange={this.handleSendChange}\n            />\n            <input type=\"submit\" value=\"Send\" />\n          </form>\n          <h1 className=\"p-3 mb-2 bg-info text-white\">\n            {this.state.outputMessages}\n          </h1>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}